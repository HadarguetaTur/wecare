generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  username        String?        @unique
  bio             String?
  email           String?        @unique
  emailVerified   DateTime?
  image           String?
  coverImage      String?
  profileImage    String?
  hashedPassword  String?
  createdAt       DateTime       @default(now())
  updateAt        DateTime       @updatedAt
  followingIds    String[]       @db.ObjectId
  followersIds    String[]       @db.ObjectId
  hasNotification Boolean?
  conversationIds String[]       @db.ObjectId
  isTherapist     Boolean?
  locationValue   String?
  interests       String[]
  dateOfBirth     DateTime?
  gender          String?
  occupation      String?
  education       String?
  website         String?
  phoneNumber     String?
  relationship    String?
  languages       String[]
  conversations   Conversation[] @relation(fields: [conversationIds], references: [id])
  seenMessageIds  String[]       @db.ObjectId
  seenMessage     Message[]      @relation("Seen", fields: [seenMessageIds], references: [id])
  posts           Post[]
  comments        Comment[]
  notification    Notification[]
  accounts        Account[]
  messages        Message[]
  meeting         Meeting[]
  treatments      Treatments[]
}

model Message {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  body           String?
  image          String?
  createAt       DateTime     @default(now())
  seenIds        String[]     @db.ObjectId
  seen           User[]       @relation("Seen", fields: [seenIds], references: [id])
  document       String?
  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String @db.ObjectId
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model Treatments {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  description       String
  imageSrc          String
  createdAt         DateTime  @default(now())
  category          String
  authority         String[]
  ages              String[]
  meeting           Meeting[]
  price             Int?
  locationValue     String
  duration          String? 
  frequency         String? 
  therapistId       String?   @db.ObjectId
  parentInvolvement String? 
  progressTracking  String? 
  reviews           Review[] 
  userId            String    @db.ObjectId
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Post              Post[]
}

model Review {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  body         String
  rating       Int
  createdAt    DateTime   @default(now())
  treatments   Treatments @relation(fields: [treatmentsId], references: [id])
  treatmentsId String     @db.ObjectId
  
}

model Meeting {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime    @default(now())
  userId       String?     @db.ObjectId
  treatmentsId String?     @db.ObjectId
  date         DateTime
  startTime    String
  endTime      String
  user         User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  Treatments   Treatments? @relation(fields: [treatmentsId], references: [id])
}

model Conversation {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime  @default(now())
  lastMessageAt DateTime  @default(now())
  name          String?
  isGroup       Boolean?
  messageIds    String[]  @db.ObjectId
  messages      Message[]
  userIds       String[]  @db.ObjectId
  user          User[]    @relation(fields: [userIds], references: [id])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Post {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  body         String
  createdAt    DateTime    @default(now())
  updateAt     DateTime    @updatedAt
  userId       String      @db.ObjectId
  likedIds     String[]    @db.ObjectId
  category     String?
  ages         String?
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments     Comment[]
  Treatments   Treatments? @relation(fields: [treatmentsId], references: [id])
  treatmentsId String?     @db.ObjectId
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
